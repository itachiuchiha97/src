<?xml version="1.0"?>
<robot name="duda" xmlns:xacro="http://ros.org/wiki/xacro">

    <!-- Set the inertial origin and pose of lidar in gazebo plugin -->
    <!-- Set joint origin for castor wheel -->

    <!-- Include Materials -->
    <material name="Black">
        <color rgba="0.0 0.0 0.0 0.9" />
    </material>

    <material name="Red">
        <color rgba="0.8 0.0 0.0 0.9" />
    </material>

    <material name="Orange">
        <color rgba="1 0.64 0.0 0.9" />
    </material>

    <material name="Yellow">
        <color rgba="0.8 0.8 0.0 0.9" />
    </material>

    <material name="Blue">
        <color rgba="0.0 0.0 0.4 0.9" />
    </material>

    <material name="White">
        <color rgba="1 1 1 1" />
    </material>

    <!--Include URDF/XACRO files -->
    <xacro:include filename="$(find duda_description)/urdf/wheel.urdf.xacro" />
    <xacro:include filename="$(find duda_description)/urdf/camera_mast.urdf.xacro" />

    <!-- Constants -->
    <xacro:property name="M_PI" value="3.14159" />
    <xacro:property name="vertical_offset" value="0.178" />

    <!-- Base_Link Visual Offsets -->
    <xacro:property name="base_long_offset" value="-0.61" />
    <xacro:property name="base_lat_offset" value="-0.315" />
    <xacro:property name="base_ver_offset" value="0" />
    <!--xacro:property name="base_ver_offset" value="-0.178" /-->

    <!-- Base_Link Properties -->
    <xacro:property name="base_link_mass" value="25" />
    <xacro:property name="base_link_x" value="1.22" />
    <xacro:property name="base_link_y" value="0.633" />
    <xacro:property name="base_link_z" value="0.356" />

    <!-- Ground Clearance -->
    <xacro:property name="ground_clearance" value="0.1525" />

    <!-- LiDAR Dimensions -->
    <xacro:property name="lidar_depth" value="0.098" />
    <xacro:property name="lidar_long_offset" value="0.467" />
    <xacro:property name="lidar_lat_offset" value="0.051" />

    <!-- LiDAR properties -->
    <xacro:property name="lidar_mass" value="1.5" />
    <xacro:property name="lidar_x" value="0.106" />
    <xacro:property name="lidar_y" value="0.102" />
    <xacro:property name="lidar_z" value="0.162" />

    <!-- GPS Properties -->
    <xacro:property name="gps_mass" value="1.2" />
    <xacro:property name="gps_x" value="0.16" />
    <xacro:property name="gps_y" value="0.16" />
    <xacro:property name="gps_z" value="0.08" />
    <xacro:property name="gps_long_offset" value="0.41" />
    <xacro:property name="gps_lat_offset" value="0" />
    <xacro:property name="gps_vertical_offset" value="0.19" />

    <!-- IMU Properties -->
    <xacro:property name="imu_mass" value="0.3" />
    <xacro:property name="imu_x" value="0.03" />
    <xacro:property name="imu_y" value="0.04" />
    <xacro:property name="imu_z" value="0.015" />
    <xacro:property name="imu_long_offset" value="0.3" />
    <xacro:property name="imu_lat_offset" value="0.09" />
    <xacro:property name="imu_vertical_offset" value="0.25" />


    <!-- Wheel Mounting Positions -->
    <xacro:property name="wheelbase" value="0.5120" />
    <xacro:property name="track" value="0.645" />
    <xacro:property name="wheel_vertical_offset" value="0.204" />
    <xacro:property name="wheel_long_offset" value="0.37" />

    <!-- Wheel Properties -->
    <xacro:property name="wheel_length" value="0.065" />
    <xacro:property name="wheel_radius" value="0.254" />

    <!-- Castor Mounting Positions -->
    <xacro:property name="castor_vertical_offset" value="0.246" />
    <xacro:property name="castor_long_offset" value="0.451" />

    <!-- Castor Mount Properties -->
    <xacro:property name="castor_mount_mass" value="7" />
    <xacro:property name="castor_mount_x" value="0.094" />
    <xacro:property name="castor_mount_y" value="0.111" />
    <xacro:property name="castor_mount_z" value="0.135" />

    <!-- Castor Wheel Properties -->
    <xacro:property name="castor_wheel_mass" value="1" />
    <xacro:property name="castor_wheel_radius" value="0.050" />
    <xacro:property name="castor_wheel_length" value="0.030" />
    <xacro:property name="castor_wheel_vertical_offset" value="0.11" />

    <!-- Castor Visual Offsets -->
    <xacro:property name="castor_vertical_offset_v" value="-0.135" />
    <xacro:property name="castor_lat_offset_v" value="-0.055" />
    <xacro:property name="castor_long_offset_v" value="-0.044" />

    <!-- Camera Mast Properties -->
    <xacro:property name="camera_mast_vertical_mass" value="0.8" />
    <xacro:property name="camera_mast_horizontal_mass" value="0.4" />
    <xacro:property name="camera_mast_cross_section_size" value="0.02" />
    <xacro:property name="camera_mast_long_offset" value="0.24" />
    <xacro:property name="camera_mast_height" value="0.6" />
    <xacro:property name="camera_mast_separation" value="0.6" />

    <!-- Camera Properties -->
    <xacro:property name="camera_size" value="0.05" />

    <!-- Macro for calculating inertia of cylinder -->
    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertia ixx="${m*(3*r*r+h*h)/12}" ixy="0" ixz="0" iyy="${m*(3*r*r+h*h)/12}" iyz="0" izz="${m*r*r/2}" />
    </xacro:macro>

    <!-- Macro for calculating inertia of box -->
    <xacro:macro name="box_inertia" params="m x y z">
        <inertia ixx="${m*(y*y+z*z)/12}" ixy="0" ixz="0" iyy="${m*(x*x+z*z)/12}" iyz="0" izz="${m*(x*x+z*z)/12}" />
    </xacro:macro>

    <!-- Base footprint -->
    <link name="base_footprint" />

    <!-- Base link -->
    <link name="base_link">
    <inertial>
        <origin xyz="${base_long_offset} ${base_lat_offset} ${base_ver_offset}" rpy="0.0 0.0 0.0" />
        <mass value="${base_link_mass}" />
        <box_inertia m="${base_link_mass}" x="${base_link_x}" y="${base_link_y}" z="${base_link_z}" />
    </inertial>

    <visual>
        <origin xyz="${base_long_offset} ${base_lat_offset} ${base_ver_offset}" rpy="0 0 0" />
        <geometry>
            <mesh filename="package://duda_description/meshes/base_link.stl" scale="0.001 0.001 0.001" />
        </geometry>
        <material name="Black" />
    </visual>

    <collision>
        <origin xyz="${base_long_offset} ${base_lat_offset} ${base_ver_offset}" rpy="0 0 0 " />
        <geometry>
            <mesh filename="package://duda_description/meshes/base_link.stl" scale="0.001 0.001 0.001" />
        </geometry>
    </collision>
    </link>

    <gazebo reference="base_link">
        <material>Gazebo/White</material>
        <turnGravityOff>false</turnGravityOff>
    </gazebo>

    <!-- Base footprint to base joint -->
    <joint name="base_footprint_to_base" type="fixed">
        <parent link="base_link" />
        <child link="base_footprint" />
        <origin xyz="0 0 ${(base_ver_offset-ground_clearance)}" />
    </joint>

    <!-- LiDAR Link -->
    <link name="lidar_link">
    <inertial>
        <mass value="${lidar_mass}" />
        <origin xyz="0 0 0" />
        <box_inertia m="${lidar_mass}" x="${lidar_x}" y="${lidar_y}" z="${lidar_z}" />
    </inertial>

    <visual>
        <origin xyz="${lidar_depth/2} ${lidar_lat_offset} 0.0" rpy="0.0 0.0 ${-radians(90)}" />
        <geometry>
            <mesh filename="package://duda_description/meshes/lidar.stl" scale="0.001 0.001 0.001" />
        </geometry>
        <material name="Red" />
    </visual>

    </link>

    <!-- base-lidar Joint -->
    <joint name="base_to_lidar" type="fixed">
        <parent link="base_link" />
        <child link="lidar_link" />
        <origin xyz="${lidar_long_offset} 0.0 ${vertical_offset}" />
    </joint>

    <!-- Lidar Gazebo Plugin -->
    <gazebo reference="lidar_link">
        <material>Gazebo/Gray</material>
        <turnGravityOff>false</turnGravityOff>
        <sensor type="ray" name="head_hokuyo_sensor">
            <pose>0 0 0 0 0 0</pose>
            <visualize>false</visualize>
            <update_rate>40</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>1080</samples>
                        <resolution>0.25</resolution>
                        <min_angle>${-radians(60)}</min_angle>
                        <max_angle>${radians(60)}</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.10</min>
                    <max>30.0</max>
                    <resolution>0.001</resolution>
                </range>
            </ray>

            <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
                <topicName>/scan</topicName>
                <frameName>lidar_link</frameName>
            </plugin>
        </sensor>
    </gazebo>

    <!-- IMU Link -->
    <link name="imu_link">
    <inertial>
        <mass value="${imu_mass}" />
        <box_inertia m="${imu_mass}" x="${imu_x}" y="${imu_x}" z="${imu_z}" />
    </inertial>
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="${imu_x} ${imu_x} ${imu_z}" />
        </geometry>
        <material name="White" />
    </visual>
    </link>

    <!-- Base to IMU Joint -->
    <joint name="base_to_imu" type="fixed">
        <origin xyz="${imu_long_offset} ${imu_lat_offset} ${imu_vertical_offset}" rpy="0.0 0.0 0.0" />
        <parent link="base_link" />
        <child link="imu_link" />
    </joint>

    <!-- IMU Gazebo Plugin -->
    <gazebo>
        <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
            <alwaysOn>true</alwaysOn>
            <bodyName>map</bodyName>
            <topicName>imu</topicName>
            <serviceName>imu_service</serviceName>
            <gaussianNoise>0.0</gaussianNoise>
            <updateRate>20.0</updateRate>
        </plugin>
    </gazebo>

    <!-- GPS Link -->
    <link name="gps_link">
    <inertial>
        <mass value="${gps_mass}" />
        <box_inertia m="${gps_mass}" x="${gps_x}" y="${gps_y}" z="${gps_z}" />
    </inertial>
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="${gps_x} ${gps_y} ${gps_z}" />
        </geometry>
        <material name="Orange" />
    </visual>
    </link>

    <!-- Base to GPS Joint -->
    <joint name="base_to_gps" type="fixed">
        <origin xyz="${gps_long_offset} ${gps_lat_offset} ${gps_vertical_offset+vertical_offset}" rpy="0.0 0.0 0.0" />
        <parent link="base_link" />
        <child link="gps_link" />
    </joint>

    <!-- GPS Gazebo Plugin -->
    <gazebo reference="gps_link">
        <material>Gazebo/Orange</material>
        <turnGravityOff>false</turnGravityOff>
        <plugin name="gps_controller" filename="libhector_gazebo_ros_gps.so">
            <robotNamespace>/</robotNamespace>
            <updateRate>40</updateRate>
            <bodyName>base_link</bodyName>
            <frameId>base_link</frameId>
            <topicName>navsat/fix</topicName>
            <velocityTopicName>navsat/vel</velocityTopicName>
            <referenceLatitude>49.9</referenceLatitude>
            <referenceLongitude>8.9</referenceLongitude>
            <referenceHeading>0</referenceHeading>
            <referenceAltitude>0</referenceAltitude>
            <drift>0.0001 0.0001 0.0001</drift>
        </plugin>
    </gazebo>

    <!-- Castor Mount Link -->
    <link name="castor_mount_link">
    <inertial>
        <mass value="${castor_mount_mass}" />
        <origin xyz="0 0 0" />
        <box_inertia m="${castor_mount_mass}" x="${castor_mount_x}" y="${castor_mount_y}" z="${castor_mount_z}" />
    </inertial>

    <visual>
        <origin xyz="${castor_long_offset_v} ${castor_lat_offset_v} ${castor_vertical_offset_v}" rpy="0.0 0.0 0.0" />
        <geometry>
            <mesh filename="package://duda_description/meshes/castor_mount.stl" scale="0.001 0.001 0.001" />
        </geometry>
        <material name="Yellow" />
    </visual>

    <collision>
        <origin xyz="${castor_long_offset_v} ${castor_lat_offset_v} ${castor_vertical_offset_v}" rpy="0 0 0" />
        <geometry>
            <mesh filename="package://duda_description/meshes/castor_mount.stl" scale="0.001 0.001 0.001" />
        </geometry>
    </collision>
    </link>

    <gazebo reference="castor_mount_link">
        <material>Gazebo/Black</material>
        <turnGravityOff>false</turnGravityOff>
    </gazebo>

    <!-- base-castor_mount Joint -->
    <joint name="base_to_castor_mount" type="fixed">
        <parent link="base_link" />
        <child link="castor_mount_link" />
        <origin xyz="${-castor_long_offset} 0.0 0.0" />
        <axis xyz="0 0 1" rpy="0 0 0" />
    </joint>

    <!-- Castor Wheel Link -->
    <link name="castor_wheel_link">
    <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="${radians(90)} 0.0 0.0" />
        <mass value="${castor_wheel_mass}" />
        <cylinder_inertia m="${castor_wheel_mass}" r="${castor_wheel_radius}" h="${castor_wheel_length}" />
    </inertial>

    <visual>
        <origin xyz="0 0 0" rpy="${radians(90)} 0.0 0.0" />
        <geometry>
            <cylinder length="${castor_wheel_length}" radius="${castor_wheel_radius}" />
        </geometry>
        <material name="Yellow" />
    </visual>

    <collision>
        <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
        <geometry>
            <cylinder length="${castor_wheel_length}" radius="${castor_wheel_radius}" />
        </geometry>
    </collision>
    </link>

    <!-- Castor mount to castor wheel Joint -->
    <joint name="castor_mount_to_castor_wheel" type="continuous">
        <parent link="castor_mount_link" />
        <child link="castor_wheel_link" />
        <origin xyz="0.0 0.0 ${-castor_wheel_vertical_offset}" />
        <axis xyz="0 1 0" rpy="0 0 0" />
    </joint>

    <gazebo reference="castor_wheel_link">
        <material>Gazebo/Black</material>
        <turnGravityOff>false</turnGravityOff>
    </gazebo>

    <!-- Camera mast macros -->
    <xacro:camera_mast height="${camera_mast_height}" separation="${camera_mast_separation}" />

    <!-- Camera Link -->
    <link name="camera_link">
    <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="${camera_size} ${camera_size} ${camera_size}" />
        </geometry>
    </collision>

    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="${camera_size} ${camera_size} ${camera_size}" />
        </geometry>
        <material name="Black" />
    </visual>

    <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0" />
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
    </link>

    <!-- Camera mast to Camera Joint -->
    <joint name="camera_mast_to_camera" type="fixed">
        <origin xyz="${camera_mast_cross_section_size/2} 0 0" rpy="0 0 0" />
        <parent link="camera_mast_horizontal_link" />
        <child link="camera_link" />
    </joint>

    <!-- Camera Gazebo Plugin -->
    <gazebo reference="camera_link">
        <sensor type="camera" name="camera1">
            <update_rate>30.0</update_rate>
            <camera name="head">
                <horizontal_fov>1.3962634</horizontal_fov>
                <image>
                    <width>800</width>
                    <height>800</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.02</near>
                    <far>300</far>
                </clip>
                <noise>
                    <type>gaussian</type>
                    <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
                    <mean>0.0</mean>
                    <stddev>0.007</stddev>
                </noise>
            </camera>
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <cameraName>duda/camera1</cameraName>
                <imageTopicName>image_raw</imageTopicName>
                <cameraInfoTopicName>camera_info</cameraInfoTopicName>
                <frameName>camera_link</frameName>
                <hackBaseline>0.07</hackBaseline>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
            </plugin>
        </sensor>
    </gazebo>

    <!-- Duda wheel macros -->
    <xacro:duda_wheel wheel_prefix="front_left">
        <origin xyz="${wheel_long_offset} ${track/2} ${-wheel_vertical_offset+vertical_offset}" rpy="0 0 0" />
    </xacro:duda_wheel>

    <xacro:duda_wheel wheel_prefix="front_right">
        <origin xyz="${wheel_long_offset} ${-track/2} ${-wheel_vertical_offset+vertical_offset}" rpy="0 0 0" />
    </xacro:duda_wheel>

    <!-- Differential drive controller Gazebo Plugin -->
    <gazebo>
        <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <legacyMode>true</legacyMode>
            <rosDebugLevel>Debug</rosDebugLevel>
            <publishWheelTF>false</publishWheelTF>
            <robotNamespace>/</robotNamespace>
            <publishTf>1</publishTf>
            <publishWheelJointState>false</publishWheelJointState>
            <alwaysOn>true</alwaysOn>
            <updateRate>100.0</updateRate>
            <leftJoint>front_left_wheel</leftJoint>
            <rightJoint>front_right_wheel</rightJoint>
            <wheelSeparation>${track}</wheelSeparation>
            <wheelDiameter>${2*wheel_radius}</wheelDiameter>
            <wheelAcceleration>1.8</wheelAcceleration>
            <broadcastTF>1</broadcastTF>
            <wheelTorque>180</wheelTorque>
            <commandTopic>cmd_vel</commandTopic>
            <odometryFrame>odom</odometryFrame>
            <odometryTopic>odom</odometryTopic>
            <robotBaseFrame>map</robotBaseFrame>
        </plugin>
    </gazebo>

</robot>
